Question:-
Given a string S consisting of opening and closing parenthesis '(' and ')'. Find length of the longest valid parenthesis substring.

A parenthesis string is valid if:

For every opening parenthesis, there is a closing parenthesis.
Opening parenthesis must be closed in the correct order.
Example 1:

Input: S = ((()
Output: 2
Explaination: The longest valid 
parenthesis substring is "()".


Approch:-  Stack+dp

 int maxLength(string s){
        
       int n=s.length();
       vector<int>dp(n,0);
       int ans=0;
       stack<int>stk;
       
       for(int i=0;i<n;i++){
           
           if(s[i]=='(')
           stk.push(i);
           else{
               
               if(!stk.empty()){
                   
                   int top=stk.top();
                   stk.pop();
                   
                   if((top-1)>=0){
                       dp[i]=dp[top-1]+(i-top+1);
                   }
                   else{
                       dp[i]=i-top+1;
                   }
               }
           }
           
           ans=max(dp[i],ans);
       }
       
       return ans;
       
    }
