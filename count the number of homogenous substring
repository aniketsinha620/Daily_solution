

// Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.

// A string is homogenous if all the characters of the string are the same.

// A substring is a contiguous sequence of characters within a string.

 

// Example 1:

// Input: s = "abbcccaa"
// Output: 13
// Explanation: The homogenous substrings are listed as below:
// "a"   appears 3 times.
// "aa"  appears 1 time.
// "b"   appears 2 times.
// "bb"  appears 1 time.
// "c"   appears 3 times.
// "cc"  appears 2 times.
// "ccc" appears 1 time.
// 3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.



















class Solution {
public:
    int countHomogenous(string s) {
        map<char, int> m;
        int i = 0, j = 0, ans = 0;
        int mod = 1000000007;

        while (j < s.length()) {
            m[s[j]]++;
            while (m.size() > 1) {
                m[s[i]]--;
                if (m[s[i]] == 0) {
                    m.erase(s[i]);
                }
                i++;
            }

            ans = (ans + j - i + 1) % mod;
            j++;
        }

        return ans;
    }
};
