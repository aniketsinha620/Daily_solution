//o(nlog n) 
class Solution {
public:
    int findKthLargest(vector<int>& arr, int k) {

        sort(arr.begin(),arr.end());
        int n=arr.size();
        return(arr[n-k]);
        
    }
};


//using priority_queue

class Solution {
public:
    int findKthLargest(vector<int>& arr, int k) {

     priority_queue<int> q;

    int n = arr.size();
    for (int i = 0; i < n; i++)
    {
        q.push(-arr[i]);
       

        if (q.size() > k)
        { 
            q.pop();
        }
    }
  
    return(-q.top());
    }
}; 

